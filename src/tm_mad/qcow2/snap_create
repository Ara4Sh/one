#!/bin/bash

# -------------------------------------------------------------------------- #
# Copyright 2002-2015, OpenNebula Project (OpenNebula.org), C12G Labs        #
#                                                                            #
# Licensed under the Apache License, Version 2.0 (the "License"); you may    #
# not use this file except in compliance with the License. You may obtain    #
# a copy of the License at                                                   #
#                                                                            #
# http://www.apache.org/licenses/LICENSE-2.0                                 #
#                                                                            #
# Unless required by applicable law or agreed to in writing, software        #
# distributed under the License is distributed on an "AS IS" BASIS,          #
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   #
# See the License for the specific language governing permissions and        #
# limitations under the License.                                             #
#--------------------------------------------------------------------------- #

# snap_create host:parent_image snap_id vmid ds_id

SRC=$1
SNAP_ID=$2
VMID=$3
DSID=$4

if [ -z "${ONE_LOCATION}" ]; then
    TMCOMMON=/var/lib/one/remotes/tm/tm_common.sh
    DATASTORES=/var/lib/one/datastores
else
    TMCOMMON=$ONE_LOCATION/var/remotes/tm/tm_common.sh
    DATASTORES=$ONE_LOCATION/var/datastores
fi

DRIVER_PATH=$(dirname $0)

. $TMCOMMON

SRC_PATH=$(arg_path $SRC)
SRC_HOST=$(arg_host $SRC)

#-------------------------------------------------------------------------------
# Get Image information
#-------------------------------------------------------------------------------

DISK_ID=$(basename ${SRC} | cut -d. -f2)

XPATH="${DRIVER_PATH}/../../datastore/xpath.rb --stdin"

unset i j XPATH_ELEMENTS

while IFS= read -r -d '' element; do
    XPATH_ELEMENTS[i++]="$element"
done < <(onevm show -x $VMID| $XPATH \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/SOURCE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/CLONE \
                    /VM/TEMPLATE/DISK[DISK_ID=$DISK_ID]/TARGET \
                    "/VM/SNAPSHOTS[DISK_ID=$DISK_ID]/SNAPSHOT[last()]/ID" \
                    /VM/HISTORY_RECORDS/HISTORY/VMMMAD \
                    /VM/STATE \
                    '%m%/VM/TEMPLATE/DISK/TARGET')

DISK_SRC="${XPATH_ELEMENTS[j++]}"
CLONE="${XPATH_ELEMENTS[j++]}"
TARGET="${XPATH_ELEMENTS[j++]}"
LAST_SNAP_ID="${XPATH_ELEMENTS[j++]}"
VMMAD="${XPATH_ELEMENTS[j++]}"
STATE="${XPATH_ELEMENTS[j++]}"
ALL_DISKS="${XPATH_ELEMENTS[j++]}"

if [ -z "$LAST_SNAP_ID" ]; then
    LAST_SNAP_ID=0
fi


SYSTEM_DS_PATH=$(dirname ${SRC_PATH})
IMAGE_DS_PATH=$(dirname ${DISK_SRC})


if [ "$CLONE" = "YES" ]; then
    DISK_PATH="${SYSTEM_DS_PATH}/disk.${DISK_ID}"
    DISK_PATH_ORIG="${DISK_PATH}.orig"
else
    DISK_PATH=$DISK_SRC
    DISK_PATH_ORIG=$DISK_PATH
fi

SNAP_ID=$(( $LAST_SNAP_ID + 1 ))

SNAP_DIR="${DISK_PATH}.snap"
SNAP_PATH="${SNAP_DIR}/${SNAP_ID}"
SNAP_PATH_RELATIVE=$(basename ${SNAP_PATH})
CURRENT_PATH=${DISK_PATH}

DOC="
<domainsnapshot>
  <name>1</name>
  <description>snap 1</description>
  <disks>
    <disk name='vda' snapshot='no'/>
    <disk name='vdb'>
      <source file='/home/jfontan/work/one/install-snaps/var//datastores/1/09eec196c67b38dea41048a628978600.snap/1'/>
    </disk>
  </disks>
</domainsnapshot>
"


DOC="
<domainsnapshot>
  <name>${SNAP_ID}</name>
  <description>snap ${SNAP_ID}</description>
  <disks>"

for disk in $ALL_DISKS; do
    if [ "$disk" = "$TARGET" ]; then
        DOC="$DOC
    <disk name='$disk' snapshot='external'>
      <source file='$SNAP_PATH'/>
    </disk>"
    else
        DOC="$DOC
    <disk name='$disk' snapshot='no'/>"
    fi
done

DOC="$DOC
  </disks>
</domainsnapshot>"

echo "$ALL_DISKS" 1>&2
echo -e "$DOC" 1>&2

#exit 1


CMD=$(cat <<EOT
set -ex

if [ ! -d "${SNAP_DIR}" ]; then
    mkdir "${SNAP_DIR}"
fi

# Move save current snapshot and create a new one. The snapshot uses
# absolute path name as the qemu-img has problems with relative backing
# file paths and symlinks

if [ "$STATE" = "3" ]; then
    touch $SNAP_PATH


    ls -la $(dirname $SNAP_PATH) 1>&2
    ls -l $SNAP_PATH 1>&2

    FILENAME="/tmp/snapshot-\$(date +%s)"
    echo -e "$DOC" > \$FILENAME

    #virsh -c qemu:///system snapshot-create-as one-$VMID $SNAP_ID "snap $SNAP_ID" --disk-only --diskspec $TARGET,file=$SNAP_PATH --atomic
    virsh -c qemu:///system snapshot-create one-$VMID --disk-only --atomic --xmlfile \$FILENAME

    ln -sf $SNAP_PATH $CURRENT_PATH
else
    mv "${CURRENT_PATH}" "${SNAP_PATH}"
    qemu-img create -f qcow2 -b "${SNAP_PATH}" "${CURRENT_PATH}"
fi

# TODO: Check that the new snapshot can be created. Roll back in case
# of error

# Convert backing file absolute path to relative path so it works outside
# the system directory. Do not do this for snapshot one as:
# * It could be a non backed file (persistent)
# * The backing file is in images directory, is not relative
if [ "$SNAP_ID" = "1" ]; then
    BACKING_FILE=\$(qemu-img info ${SNAP_PATH} | grep '^backing file:' | \
        cut -d: -f2 | sed 's/^ //')

    if [ -n "\$BACKING_FILE" ]; then
        REAL_BACKING_FILE="\${BACKING_FILE}.orig"

        qemu-img rebase -u -b "\${REAL_BACKING_FILE}" "${SNAP_PATH}"
    fi

    ln -sf "${DISK_PATH_ORIG}" "${SNAP_DIR}/0"
fi
EOT
)

ssh_exec_and_log "${SRC_HOST}" "${CMD}" \
                 "Error creating snapshot ${SNAP_PATH}"

